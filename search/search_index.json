{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"A flexible multiplexed image segmentation pipeline based on pixel classification Measuring objects and their features in images is a basic step in many quantitative tissue image analysis workflows. This repository presents a flexible and scalable image processing pipeline tailored to highly multiplexed images facilitating the segmentation of single cells across hundreds of images. It is based on supervised pixel classification using Ilastik to distill segmentation relevant information from multiplexed images in a semi-supervised, automated fashion. This feature reduction step is followed by standard image segmentation using CellProfiler . The segmentation pipeline is accompanied by the imcsegpipe python package building up on readimc as well as customized CellProfiler modules , which facilitate the analysis of highly multiplexed images. The pipeline is entirely build on open source tools, can be easily adapted to more specific problems and forms a basis for quantitative multiplexed tissue image analysis. For a more detailed introduction to IMC as technolgy and common data analysis steps, please refer to the IMC workflow website . The steinbock framework offers a dockerized version of the pipeline and extends the segmentation approach by deepcell segmentation. This site gives detailed explanations of the individual steps of the pipeline ( see below ) to generate single-cell measurements from raw imaging data. Scope While we highlight the use of the pipeline with imaging mass cytometry (IMC) data, the concepts presented here can be easily applied to other highly multiplexed imaging data. Starting with .ome.tiff or .tiff files, Ilastik pixel classification, segmentation and feature extraction can be performed in a technology-agnostic way. Critical notes There are some points that need to be considered when using this pipeline: The input files need to be .zip folders that contain the .mcd files and .txt files (see the pre-processing section ) It is recommended to acquire 5 or more channels to avoid potential downstream problems where images are considered to be of the RGBA type (red, green, blue, alpha). Documentation The guide displayed here gives detailed information on how to handle IMC images. For additional information on CellProfiler , please refer to their manuals . Getting started For the main part of the analysis, you will need to install Ilastik and CellProfiler . The current setup is tested with Ilastik v1.3.3post3 and CellProfiler v4.2.1. Furthermore, before running the analysis, you will need to setup a conda environment: Install conda Clone the repository: git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git Setup the conda environment: cd ImcSegmentationPipeline conda env create -f environment.yml Configure CellProfiler to use the plugins by opening the CellProfiler GUI, selecting Preferences and setting the CellProfiler plugins directory to path/to/ImcSegmentationPipeline/resources/ImcPluginsCP/plugins and restart CellProfiler . Alternatively you can clone the ImcPluginsCP repository individually and set the path correctly in CellProfiler. Activate the environment created in 3. and start a jupyter instance conda activate imcsegpipe jupyter-lab This will automatically open a jupyter instance at http://localhost:8888/lab in your browser. From there, you can open the scripts/imc_preprocessing.ipynb notebook and start the data pre-processing. Image data types Throughout this pipeline, images in TIFF format are saved as unsigned 16-bit images with an intensity range of 0 - 65535 . For an overview on common image data types, please refer to the scikit-image documentation . Pre-processing To work with the generated imaging data, they will first be converted into OME-TIFF, multi-channel and single-channel TIFF formats that are compatible with most imaging software. A key step of the pre-processing pipeline is also the selection of channels for (i) downstream cell measurements and (ii) ilastik pixel classification. A CellProfiler pipeline is used to crop smaller images for reducing the computational burden during pixel labelling. Please follow the pre-processing guide for more information. Ilastik training Image crops are labelled based on nuclear, cytoplasmic and background pixels. The classification probability is observed and regions with high uncertainty are re-labelled. Based on the specified labels, probabilities for each pixel belonging to the nuclear, cytoplasmic and background class are generated. These pixel-level propabilies are used to segment images in the next step. Please follow the Ilastik instructions for more information. CellProfiler image segmentation A CellProfiler pipeline is used to segment cells based on the pixel probabilities generated in the previous step. Segmentation masks are written out as single-channel TIFF images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects (e.g. cells). A second CellProfiler pipeline is then used to extract object-specific features (e.g. mean intensity per channel and object) and to write out these features as CSV file. Please follow the segmentation instructions for more information. An overview of the full segmentation pipeline Downstream analysis For downstream analysis in R , please refer to the IMC Data Analysis workflow and the read_cpout function of the imcRtools package. Contributors Creator: Vito Zanotelli Contributors: Jonas Windhager , Nils Eling Maintainer: Nils Eling Citation @misc{ImcSegmentationPipeline, author = {Vito RT Zanotelli, Bernd Bodenmiller}, title = {{ImcSegmentationPipeline: A pixel-classification based multiplexed image segmentation pipeline}}, year = 2022, doi = {10.5281/zenodo.3841961}, version = {3.0}, publisher = {Zenodo}, url = {https://doi.org/10.5281/zenodo.3841961} }","title":"Home"},{"location":"index.html#a-flexible-multiplexed-image-segmentation-pipeline-based-on-pixel-classification","text":"Measuring objects and their features in images is a basic step in many quantitative tissue image analysis workflows. This repository presents a flexible and scalable image processing pipeline tailored to highly multiplexed images facilitating the segmentation of single cells across hundreds of images. It is based on supervised pixel classification using Ilastik to distill segmentation relevant information from multiplexed images in a semi-supervised, automated fashion. This feature reduction step is followed by standard image segmentation using CellProfiler . The segmentation pipeline is accompanied by the imcsegpipe python package building up on readimc as well as customized CellProfiler modules , which facilitate the analysis of highly multiplexed images. The pipeline is entirely build on open source tools, can be easily adapted to more specific problems and forms a basis for quantitative multiplexed tissue image analysis. For a more detailed introduction to IMC as technolgy and common data analysis steps, please refer to the IMC workflow website . The steinbock framework offers a dockerized version of the pipeline and extends the segmentation approach by deepcell segmentation. This site gives detailed explanations of the individual steps of the pipeline ( see below ) to generate single-cell measurements from raw imaging data.","title":"A flexible multiplexed image segmentation pipeline based on pixel classification"},{"location":"index.html#scope","text":"While we highlight the use of the pipeline with imaging mass cytometry (IMC) data, the concepts presented here can be easily applied to other highly multiplexed imaging data. Starting with .ome.tiff or .tiff files, Ilastik pixel classification, segmentation and feature extraction can be performed in a technology-agnostic way.","title":"Scope"},{"location":"index.html#critical-notes","text":"There are some points that need to be considered when using this pipeline: The input files need to be .zip folders that contain the .mcd files and .txt files (see the pre-processing section ) It is recommended to acquire 5 or more channels to avoid potential downstream problems where images are considered to be of the RGBA type (red, green, blue, alpha).","title":"Critical notes"},{"location":"index.html#documentation","text":"The guide displayed here gives detailed information on how to handle IMC images. For additional information on CellProfiler , please refer to their manuals .","title":"Documentation"},{"location":"index.html#getting-started","text":"For the main part of the analysis, you will need to install Ilastik and CellProfiler . The current setup is tested with Ilastik v1.3.3post3 and CellProfiler v4.2.1. Furthermore, before running the analysis, you will need to setup a conda environment: Install conda Clone the repository: git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git Setup the conda environment: cd ImcSegmentationPipeline conda env create -f environment.yml Configure CellProfiler to use the plugins by opening the CellProfiler GUI, selecting Preferences and setting the CellProfiler plugins directory to path/to/ImcSegmentationPipeline/resources/ImcPluginsCP/plugins and restart CellProfiler . Alternatively you can clone the ImcPluginsCP repository individually and set the path correctly in CellProfiler. Activate the environment created in 3. and start a jupyter instance conda activate imcsegpipe jupyter-lab This will automatically open a jupyter instance at http://localhost:8888/lab in your browser. From there, you can open the scripts/imc_preprocessing.ipynb notebook and start the data pre-processing.","title":"Getting started"},{"location":"index.html#image-data-types","text":"Throughout this pipeline, images in TIFF format are saved as unsigned 16-bit images with an intensity range of 0 - 65535 . For an overview on common image data types, please refer to the scikit-image documentation .","title":"Image data types"},{"location":"index.html#pre-processing","text":"To work with the generated imaging data, they will first be converted into OME-TIFF, multi-channel and single-channel TIFF formats that are compatible with most imaging software. A key step of the pre-processing pipeline is also the selection of channels for (i) downstream cell measurements and (ii) ilastik pixel classification. A CellProfiler pipeline is used to crop smaller images for reducing the computational burden during pixel labelling. Please follow the pre-processing guide for more information.","title":"Pre-processing"},{"location":"index.html#ilastik-training","text":"Image crops are labelled based on nuclear, cytoplasmic and background pixels. The classification probability is observed and regions with high uncertainty are re-labelled. Based on the specified labels, probabilities for each pixel belonging to the nuclear, cytoplasmic and background class are generated. These pixel-level propabilies are used to segment images in the next step. Please follow the Ilastik instructions for more information.","title":"Ilastik training"},{"location":"index.html#cellprofiler-image-segmentation","text":"A CellProfiler pipeline is used to segment cells based on the pixel probabilities generated in the previous step. Segmentation masks are written out as single-channel TIFF images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects (e.g. cells). A second CellProfiler pipeline is then used to extract object-specific features (e.g. mean intensity per channel and object) and to write out these features as CSV file. Please follow the segmentation instructions for more information. An overview of the full segmentation pipeline","title":"CellProfiler image segmentation"},{"location":"index.html#downstream-analysis","text":"For downstream analysis in R , please refer to the IMC Data Analysis workflow and the read_cpout function of the imcRtools package.","title":"Downstream analysis"},{"location":"index.html#contributors","text":"Creator: Vito Zanotelli Contributors: Jonas Windhager , Nils Eling Maintainer: Nils Eling","title":"Contributors"},{"location":"index.html#citation","text":"@misc{ImcSegmentationPipeline, author = {Vito RT Zanotelli, Bernd Bodenmiller}, title = {{ImcSegmentationPipeline: A pixel-classification based multiplexed image segmentation pipeline}}, year = 2022, doi = {10.5281/zenodo.3841961}, version = {3.0}, publisher = {Zenodo}, url = {https://doi.org/10.5281/zenodo.3841961} }","title":"Citation"},{"location":"ilastik.html","text":"Ilastik pixel classification In this setp, we use Ilastik to label pixels and train a random-forest classifier for semantic segmentation. This means that each pixel will be classified as \"nuclear\", \"cytoplasmic\" or \"background\". The probability of each pixel belonging to one of these classes will be used for image segmentation (see cell segmentation ). Prepare images for pixel classification In the first step, the resources/pipelines/1_prepare_ilastik.cppipe CellProfiler pipeline will be used to prepare images for labelling and classification. To get started, you will need to open CellProfiler and import the 1_prepare_ilastik.cppipe pipeline. Drop the analysis/ilastik folder into the window under Images In Output Settings set the analysis/crops folder as Default Output Folder The pipeline will read in all multi-channel images from the analysis/ilastik folder containing the suffix _ilastik . The following steps are part of the pipeline: The average intensity across all channels is computed and multiplied by 100. This will later serve as visual help to find background areas during Ilastik pixel labelling. The average is clipped to 0 and 1 (after uint16 rescaling) to avoid out-of-range errors. The average channel is added to the Ilastik stack as first channel. The pixels of the Ilastik stack are upscaled by a factor of 2. This will increase the number of pixels in the image 4 fold and facilitates pixel labelling. The Ilastik stack is cropped into smaller fields of view. By default these are 500x500 pixel crops but for large datasets smaller image crops will suffice. The upscaled Ilastik stack is saved in .h5 format into the analysis/ilastik folder and the cropped images are saved into the analysis/crops folder. Train and apply a pixel classifier Here, we will open Ilastik and perform pixel labelling as well as pixel classification. For a detailed overview on Ilastik pixel classification refer to the manual . After using the scripts/download_examples.ipynb script, you can find the IMCWorkflwo.ilp Ilastik project in the root directory of the repository. This project contains a classifier pre-trained on the example IMC data. To create a new classifier, please follow the steps below: Create a new Pixel Classification project. Under Input Data press Add New... > Add separate Image(s) and select all .h5 files in the analysis/crops folder. Feature Selection : we generally recommend to select all features with \u03c3 >= 1 Training : The following steps need to be performed to train the classifier Create and rename 3 labels: Label 1 - \"nucleus\"; Label 2 - \"cytoplasm\"; Label 3 - \"background\" Observe the different channels: the last entry Raw Input in the box on the bottom left indicates the current channel. You can change the channel by using the buttons on the left and the channel order is stored in the _ilastik.csv files in the analysis/ilastik folder. Adjust the contrast of the channel: This can be done by selecting the Window Leveling tool under Add Label . Holding the left mouse button and moving the mouse changes the visual appearance of the channel. Clicking the right mouse button resets the channel intensities. Label the pixels: Select the Brush Cursor tool and draw lines on the image. You can get an orientation by looking at the labels in the IMCWorkflow.ilp project. Switch between labels to label pixels as \"nucleus\", \"cytoplasm\" and \"background\". Label pixel in an opiniated fashion: If you see in the nucleus channel that two nuclei are stuck together but have a faint dip in intensity in between, label this dip as \"cytoplasm\". Encircle nuclei with \"cytoplasm\". After labelling a few images, click on Live Update . This will show the current prediction for the three classes. Labelling while keeping Live Update enabled slows down the process. Observe the uncertainties by clicking the \"eye\" next to Uncertainty . This will show you regions in which classification uncertainty is highest. These regions need to be re-labelled. A well trained classifier has low uncertainty within class regions (e.g., nuclei) and high uncertainty at class borders (e.g., between nuclei and cytoplasm). Prediction Export : Once the classifier is well trained, perform the following steps to export predictions: Source : Probabilities Choose Export Image Settings : Convert to Data Type : unsigned 16-bit check Renormalize Format : tiff Batch Processing : In this step the pixel probabilities of all images will be generated. Select Raw Data Files... : Select all _s2.h5 files in the analysis/ilastik folder. Click on Process all files The last step will generate 3 channel RGB images containing the pixel probabilities for image segmentation (see cell segmentation ). Output The following outputs have been generated during this step of the pipeline: analysis/crops : this folder contains the image crops of the ilastik stack in .h5 format for ilastik training. analysis/ilastik/..._s2.h5 : upscaled ilastik stack in .h5 format for pixel classification. analysis/ilastik/..._s2_Probabilities.tiff : 3 channel RGB images containg the pixel probabilities for segmentation.","title":"Ilastik training"},{"location":"ilastik.html#ilastik-pixel-classification","text":"In this setp, we use Ilastik to label pixels and train a random-forest classifier for semantic segmentation. This means that each pixel will be classified as \"nuclear\", \"cytoplasmic\" or \"background\". The probability of each pixel belonging to one of these classes will be used for image segmentation (see cell segmentation ).","title":"Ilastik pixel classification"},{"location":"ilastik.html#prepare-images-for-pixel-classification","text":"In the first step, the resources/pipelines/1_prepare_ilastik.cppipe CellProfiler pipeline will be used to prepare images for labelling and classification. To get started, you will need to open CellProfiler and import the 1_prepare_ilastik.cppipe pipeline. Drop the analysis/ilastik folder into the window under Images In Output Settings set the analysis/crops folder as Default Output Folder The pipeline will read in all multi-channel images from the analysis/ilastik folder containing the suffix _ilastik . The following steps are part of the pipeline: The average intensity across all channels is computed and multiplied by 100. This will later serve as visual help to find background areas during Ilastik pixel labelling. The average is clipped to 0 and 1 (after uint16 rescaling) to avoid out-of-range errors. The average channel is added to the Ilastik stack as first channel. The pixels of the Ilastik stack are upscaled by a factor of 2. This will increase the number of pixels in the image 4 fold and facilitates pixel labelling. The Ilastik stack is cropped into smaller fields of view. By default these are 500x500 pixel crops but for large datasets smaller image crops will suffice. The upscaled Ilastik stack is saved in .h5 format into the analysis/ilastik folder and the cropped images are saved into the analysis/crops folder.","title":"Prepare images for pixel classification"},{"location":"ilastik.html#train-and-apply-a-pixel-classifier","text":"Here, we will open Ilastik and perform pixel labelling as well as pixel classification. For a detailed overview on Ilastik pixel classification refer to the manual . After using the scripts/download_examples.ipynb script, you can find the IMCWorkflwo.ilp Ilastik project in the root directory of the repository. This project contains a classifier pre-trained on the example IMC data. To create a new classifier, please follow the steps below: Create a new Pixel Classification project. Under Input Data press Add New... > Add separate Image(s) and select all .h5 files in the analysis/crops folder. Feature Selection : we generally recommend to select all features with \u03c3 >= 1 Training : The following steps need to be performed to train the classifier Create and rename 3 labels: Label 1 - \"nucleus\"; Label 2 - \"cytoplasm\"; Label 3 - \"background\" Observe the different channels: the last entry Raw Input in the box on the bottom left indicates the current channel. You can change the channel by using the buttons on the left and the channel order is stored in the _ilastik.csv files in the analysis/ilastik folder. Adjust the contrast of the channel: This can be done by selecting the Window Leveling tool under Add Label . Holding the left mouse button and moving the mouse changes the visual appearance of the channel. Clicking the right mouse button resets the channel intensities. Label the pixels: Select the Brush Cursor tool and draw lines on the image. You can get an orientation by looking at the labels in the IMCWorkflow.ilp project. Switch between labels to label pixels as \"nucleus\", \"cytoplasm\" and \"background\". Label pixel in an opiniated fashion: If you see in the nucleus channel that two nuclei are stuck together but have a faint dip in intensity in between, label this dip as \"cytoplasm\". Encircle nuclei with \"cytoplasm\". After labelling a few images, click on Live Update . This will show the current prediction for the three classes. Labelling while keeping Live Update enabled slows down the process. Observe the uncertainties by clicking the \"eye\" next to Uncertainty . This will show you regions in which classification uncertainty is highest. These regions need to be re-labelled. A well trained classifier has low uncertainty within class regions (e.g., nuclei) and high uncertainty at class borders (e.g., between nuclei and cytoplasm). Prediction Export : Once the classifier is well trained, perform the following steps to export predictions: Source : Probabilities Choose Export Image Settings : Convert to Data Type : unsigned 16-bit check Renormalize Format : tiff Batch Processing : In this step the pixel probabilities of all images will be generated. Select Raw Data Files... : Select all _s2.h5 files in the analysis/ilastik folder. Click on Process all files The last step will generate 3 channel RGB images containing the pixel probabilities for image segmentation (see cell segmentation ).","title":"Train and apply a pixel classifier"},{"location":"ilastik.html#output","text":"The following outputs have been generated during this step of the pipeline: analysis/crops : this folder contains the image crops of the ilastik stack in .h5 format for ilastik training. analysis/ilastik/..._s2.h5 : upscaled ilastik stack in .h5 format for pixel classification. analysis/ilastik/..._s2_Probabilities.tiff : 3 channel RGB images containg the pixel probabilities for segmentation.","title":"Output"},{"location":"measurement.html","text":"Measurement of object features After image segmentation to identify individual objects/cells, the next CellProfiler pipeline will measure single-object and single-image features. Set up the pipeline by importing the resources/pipelines/3_measure_mask.cppipe pipeline into CellProfiler and perform following steps: Drag and drop the analysis/cpout folder into the Images window. In the Output Settings adjust the Default Output Folder to analysis/cpout . In the Output Settings adjust the Default Input Folder to analysis/cpinp . The following steps are part of the pipeline: Metadata : Metadata from the images ( acname and acid ) are matched and merged with image metadata generated during pre-processing (contained in the analysis/cpinp/acquisition_metadata.csv file). NamesAndTypes : The multi-channel images (stored in analysis/cpout/images ), segmentation masks (stored in analysis/cpout/images ) and the pixel probabilities (stored in analysis/cpout/probabilities ) are read in and matched via their acquisition name ( acname ) and acquisition ID ( acid ). Segmentation masks are read in as 16-bit grayscale images and are converted to objects while keeping their original labels in place. For each cell its neighbors are detected by expanding the mask by a defined distance. The full stack channel intensities per object/cell are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the analysis/cpout/images/..._full.csv files. The probability stack channel intensities per object/cell are extracted. The size and shape features per object/cell are extracted. The full stack channel intensities per image are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the analysis/cpout/images/..._full.csv files. The probability stack channel intensities per image are extracted. The object/cell, image and experiment data is saved as .csv files. The cell.csv file contains single-cell features including intensity and morphological features. Here are a few notes to the export: You can select a subset of features by setting Select the measurements to export to Yes . We usually work with the MeanIntensity cell measurements. the intensity values are all scaled by a scaling factor corresponding to the bit depth. This scaling factor can be found in the Image.csv file in the Scaling_FullStack column. For 16-bit unsigned integer images ( uint16 ) as we use them here the values are divided by 2**16 - 1 = 65535 . The channel identifier _c1 , _c2 , _c3 , ... corresponds to the position in the ..._full.csv files found in the analysis/cpout/images folder. The original acquisition description, acquisition frequencies, acquisition name, etc. can be found in the Image.csv output file as Metdata_... columns. The cell-cell neighbor information detected in step 4 are exported as .csv file containing an edge list. The final output are .csv files that contain additional metadata per measured feature. For the cell features the following information is written out: category (e.g. Intensity), image_name (e.g. FullStack), object_name , feature_name (e.g. MeanIntensity), channel (e.g. 1), parameters , channel_id (e.g. Ir191) and data_type (e.g. float) Output After feature measurment the following files have been generated: analysis/cpout/cell.csv : contains features (columns) for each cell (rows). analysis/cpout/Experiment.csv : contains metadata related to the CellProfiler version used. analysis/cpout/Image.csv : contains image-level measurements (e.g. channel intensities) and acquisition metadata. analysis/cpout/Object relationships.csv : contains neighbor information in form of an edge list between cells. analysis/cpout/var_cell.csv : contains feature metadata for all single-cell features. analysis/cpout/var_Image.csv : contains feature metadata for all image features.","title":"Cell measurement"},{"location":"measurement.html#measurement-of-object-features","text":"After image segmentation to identify individual objects/cells, the next CellProfiler pipeline will measure single-object and single-image features. Set up the pipeline by importing the resources/pipelines/3_measure_mask.cppipe pipeline into CellProfiler and perform following steps: Drag and drop the analysis/cpout folder into the Images window. In the Output Settings adjust the Default Output Folder to analysis/cpout . In the Output Settings adjust the Default Input Folder to analysis/cpinp . The following steps are part of the pipeline: Metadata : Metadata from the images ( acname and acid ) are matched and merged with image metadata generated during pre-processing (contained in the analysis/cpinp/acquisition_metadata.csv file). NamesAndTypes : The multi-channel images (stored in analysis/cpout/images ), segmentation masks (stored in analysis/cpout/images ) and the pixel probabilities (stored in analysis/cpout/probabilities ) are read in and matched via their acquisition name ( acname ) and acquisition ID ( acid ). Segmentation masks are read in as 16-bit grayscale images and are converted to objects while keeping their original labels in place. For each cell its neighbors are detected by expanding the mask by a defined distance. The full stack channel intensities per object/cell are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the analysis/cpout/images/..._full.csv files. The probability stack channel intensities per object/cell are extracted. The size and shape features per object/cell are extracted. The full stack channel intensities per image are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the analysis/cpout/images/..._full.csv files. The probability stack channel intensities per image are extracted. The object/cell, image and experiment data is saved as .csv files. The cell.csv file contains single-cell features including intensity and morphological features. Here are a few notes to the export: You can select a subset of features by setting Select the measurements to export to Yes . We usually work with the MeanIntensity cell measurements. the intensity values are all scaled by a scaling factor corresponding to the bit depth. This scaling factor can be found in the Image.csv file in the Scaling_FullStack column. For 16-bit unsigned integer images ( uint16 ) as we use them here the values are divided by 2**16 - 1 = 65535 . The channel identifier _c1 , _c2 , _c3 , ... corresponds to the position in the ..._full.csv files found in the analysis/cpout/images folder. The original acquisition description, acquisition frequencies, acquisition name, etc. can be found in the Image.csv output file as Metdata_... columns. The cell-cell neighbor information detected in step 4 are exported as .csv file containing an edge list. The final output are .csv files that contain additional metadata per measured feature. For the cell features the following information is written out: category (e.g. Intensity), image_name (e.g. FullStack), object_name , feature_name (e.g. MeanIntensity), channel (e.g. 1), parameters , channel_id (e.g. Ir191) and data_type (e.g. float)","title":"Measurement of object features"},{"location":"measurement.html#output","text":"After feature measurment the following files have been generated: analysis/cpout/cell.csv : contains features (columns) for each cell (rows). analysis/cpout/Experiment.csv : contains metadata related to the CellProfiler version used. analysis/cpout/Image.csv : contains image-level measurements (e.g. channel intensities) and acquisition metadata. analysis/cpout/Object relationships.csv : contains neighbor information in form of an edge list between cells. analysis/cpout/var_cell.csv : contains feature metadata for all single-cell features. analysis/cpout/var_Image.csv : contains feature metadata for all image features.","title":"Output"},{"location":"output.html","text":"Final output files The IMC Segmentation Pipeline produces a number of output files during pre-processing, ilastik pixel classification, segmentation and measurement. They are listed below: analysis | \u251c\u2500\u2500 cpinp \u251c\u2500\u2500 acquisition_metadata.csv \u251c\u2500\u2500 full_channelmeta.csv \u251c\u2500\u2500 probab_channelmeta_manual.csv \u251c\u2500\u2500 cpout \u251c\u2500\u2500 images \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv \u251c\u2500\u2500 ... \u251c\u2500\u2500 masks \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_mask.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 probabilities \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_s1.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 cell.csv \u251c\u2500\u2500 Experiment.csv \u251c\u2500\u2500 Image.csv \u251c\u2500\u2500 Object relationships.csv \u251c\u2500\u2500 panel.csv \u251c\u2500\u2500 var_cell.csv \u251c\u2500\u2500 var_Image.csv \u251c\u2500\u2500 crops \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_x{X}_y{Y}_w{W}_h{H}.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 histocat \u251c\u2500\u2500 {XYZ}_s0_a1_ac \u251c\u2500\u2500 {channel_label}_{channel_name}.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... \u251c\u2500\u2500 ilastik \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2.h5 \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 ometiff \u251c\u2500\u2500 {XYZ} \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv \u251c\u2500\u2500 ... \u251c\u2500\u2500 {XYZ}_s0_p1_pano.png \u251c\u2500\u2500 ... \u251c\u2500\u2500 {XYZ}_s0_slide.png \u251c\u2500\u2500 {XYZ}_schema.xml Here XYZ indicates the sample name. The main output folder The cpout folder contains all relevant output files: cpout/images : contains the hot pixel filtered full stacks for analysis as well as .csv files indicating the channel order. cpout/masks : contains single-channel segmentation masks in 16-bit .tiff format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects. cpout/probabilities : contains 3 channel images in 16-bit .tiff format representing the downscaled pixel probabilities after Ilastik pixel classification. cpout/cell.csv : contains features (columns) for each cell (rows). cpout/Experiment.csv : contains metadata related to the CellProfiler version used. cpout/Image.csv : contains image-level measurements (e.g. channel intensities) and acquisition metadata. cpout/Object relationships.csv : contains neighbor information in form of an edge list between cells. cpout/panel.csv : a copy of the panel file used for the experiment. cpout/var_cell.csv : contains feature metadata for all single-cell features. cpout/var_Image.csv : contains feature metadata for all image features. The CellProfiler input folder The cpinp folder contains metadata files for CellProfiler input: cpinp/acquisition_metadata.csv : containing acquisition metadata. cpinp/full_channelmeta.csv : containing full stack channel metadata. cpinp/probab_channelmeta_manual.csv : containing probability stack channel metadata. Ilastik folder The following folders contain files for Ilastik pixel classification: analysis/ilastik : contains the Ilastik stacks ( {XYZ}_s0_a1_ac_ilastik.tiff ), matched .csv files indicating the correct channel order ( {XYZ}_s0_a1_ac_ilastik.csv ), the upscaled ilastik stacks in .h5 format ( XYZ}_s0_a1_ac_ilastik_s2.h5 ) and upscaled pixel probabilities ( {XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff ). analysis/crops : this folder contains the image crops of the Ilastik stack in .h5 format for Ilastik training. Image data folders The following folders contain data in different formats for use with other software or histoCAT . analysis/ometiff : contains individual folders (one per sample) of which each contains multiple .ome.tiff files (one per acquisition). analysis/histocat : contains individual folders (one per acquisition) of which each contains multiple single-channel .tiff files for upload to histoCAT.","title":"Output files"},{"location":"output.html#final-output-files","text":"The IMC Segmentation Pipeline produces a number of output files during pre-processing, ilastik pixel classification, segmentation and measurement. They are listed below: analysis | \u251c\u2500\u2500 cpinp \u251c\u2500\u2500 acquisition_metadata.csv \u251c\u2500\u2500 full_channelmeta.csv \u251c\u2500\u2500 probab_channelmeta_manual.csv \u251c\u2500\u2500 cpout \u251c\u2500\u2500 images \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv \u251c\u2500\u2500 ... \u251c\u2500\u2500 masks \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_mask.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 probabilities \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_s1.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 cell.csv \u251c\u2500\u2500 Experiment.csv \u251c\u2500\u2500 Image.csv \u251c\u2500\u2500 Object relationships.csv \u251c\u2500\u2500 panel.csv \u251c\u2500\u2500 var_cell.csv \u251c\u2500\u2500 var_Image.csv \u251c\u2500\u2500 crops \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_x{X}_y{Y}_w{W}_h{H}.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 histocat \u251c\u2500\u2500 {XYZ}_s0_a1_ac \u251c\u2500\u2500 {channel_label}_{channel_name}.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 ... \u251c\u2500\u2500 ilastik \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2.h5 \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff \u251c\u2500\u2500 ... \u251c\u2500\u2500 ometiff \u251c\u2500\u2500 {XYZ} \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv \u251c\u2500\u2500 ... \u251c\u2500\u2500 {XYZ}_s0_p1_pano.png \u251c\u2500\u2500 ... \u251c\u2500\u2500 {XYZ}_s0_slide.png \u251c\u2500\u2500 {XYZ}_schema.xml Here XYZ indicates the sample name.","title":"Final output files"},{"location":"output.html#the-main-output-folder","text":"The cpout folder contains all relevant output files: cpout/images : contains the hot pixel filtered full stacks for analysis as well as .csv files indicating the channel order. cpout/masks : contains single-channel segmentation masks in 16-bit .tiff format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects. cpout/probabilities : contains 3 channel images in 16-bit .tiff format representing the downscaled pixel probabilities after Ilastik pixel classification. cpout/cell.csv : contains features (columns) for each cell (rows). cpout/Experiment.csv : contains metadata related to the CellProfiler version used. cpout/Image.csv : contains image-level measurements (e.g. channel intensities) and acquisition metadata. cpout/Object relationships.csv : contains neighbor information in form of an edge list between cells. cpout/panel.csv : a copy of the panel file used for the experiment. cpout/var_cell.csv : contains feature metadata for all single-cell features. cpout/var_Image.csv : contains feature metadata for all image features.","title":"The main output folder"},{"location":"output.html#the-cellprofiler-input-folder","text":"The cpinp folder contains metadata files for CellProfiler input: cpinp/acquisition_metadata.csv : containing acquisition metadata. cpinp/full_channelmeta.csv : containing full stack channel metadata. cpinp/probab_channelmeta_manual.csv : containing probability stack channel metadata.","title":"The CellProfiler input folder"},{"location":"output.html#ilastik-folder","text":"The following folders contain files for Ilastik pixel classification: analysis/ilastik : contains the Ilastik stacks ( {XYZ}_s0_a1_ac_ilastik.tiff ), matched .csv files indicating the correct channel order ( {XYZ}_s0_a1_ac_ilastik.csv ), the upscaled ilastik stacks in .h5 format ( XYZ}_s0_a1_ac_ilastik_s2.h5 ) and upscaled pixel probabilities ( {XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff ). analysis/crops : this folder contains the image crops of the Ilastik stack in .h5 format for Ilastik training.","title":"Ilastik folder"},{"location":"output.html#image-data-folders","text":"The following folders contain data in different formats for use with other software or histoCAT . analysis/ometiff : contains individual folders (one per sample) of which each contains multiple .ome.tiff files (one per acquisition). analysis/histocat : contains individual folders (one per acquisition) of which each contains multiple single-channel .tiff files for upload to histoCAT.","title":"Image data folders"},{"location":"prepro.html","text":"Pre-processing During the first step of the segmentation pipeline, raw data need to be converted to file formats that can be read-in by external software ( Fiji , R , python , histoCAT ). Please follow the preprocessing.ipynb script to pre-process the raw data. To get started, please refer to the instructions here . Input The zipped .mcd files The Hyperion Imaging System produces vendor controlled .mcd and .txt files in the following folder structure: \u251c\u2500\u2500 {XYZ}_ROI_001_1.txt \u251c\u2500\u2500 {XYZ}_ROI_002_2.txt \u251c\u2500\u2500 {XYZ}_ROI_003_3.txt \u251c\u2500\u2500 {XYZ}.mcd where XYZ defines the filename, ROI_001 , ROI_002 , ROI_003 are names (description) for the selected regions of interest (ROI) and 1, 2, 3 indicate the acquistion identifiers. The ROI description entry can be specified in the Fluidigm software when selecting ROIs. The .mcd file contains the raw imaging data of all acquired ROIs while each .txt file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, we recommend to zip the folder and specify the location of all .zip files for preprocessing. Each .zip file should only contain data from a single .mcd file and the name of the .zip file should match the name of the .mcd file. The panel file The panel file (in .csv format) specifies the type of antibodies that were used in the experiment and all additional channels (e.g. metals used for counterstaining 1 ) that you want to include in downstream processing. Example entries to the panel file can look like this: Metal Tag Target full ilastik Dy161 Ecad 1 1 Dy162 CD45 1 0 Er166 CD3 1 1 Ru100 Counterstain 1 0 Usually there are more columns but the important ones in this case are Metal Tag , full and ilastik . The 1 in the full column specifies channels that should be written out to an image stack that will be later on used to extract features (also refered to as \"full stack\"). Here, please specify all channels as 1 that you want to have included in the analysis. The 1 in the ilastik column indicates channels that will be used for Ilastik pixel classification therefore being used for image segmentation (also refered to as \"Ilastik stack\"). During the pre-processing steps, you will need to specify the name of the panel column that contains the metal isotopes, the name of the column that contains the 1 or 0 entries for the channels to be analysed and the name of the column that indicates the channels used for Ilastik training as seen above. Naming conventions When going through the preprocessing script , you will notice the specification of the _full and _ilastik suffix indicating the two image stacks mentioned above. Example data We provide raw IMC example data at zenodo.org/record/5949116 . This dataset contains 4 .zip archives each of which holds one .mcd and multiple .txt files. The data was acquired as part of the I ntegrated i MMU noprofiling of large adaptive CAN cer patient cohorts (IMMUcan) project immucan.eu using the Hyperion imaging system . Data of 4 patients with different cancer types are provided. To download the raw data together with the panel file, sample metadata and a pre-trained Ilastik classifier, please follow the download script . Conversion fom .mcd to .ome.tiff files In the first step of the pipeline, raw .mcd files are converted into .ome.tiff files 2 . This serves the purpose to allow vendor independent downstream analysis and visualization of the images. For in-depth information of the .ome.tiff file format see here . Each .mcd file can contain multiple acquisitions. This means that multiple multi-channel .ome.tiff files per .mcd file are produced. The Fluor and Name entries of each channel are set. Here Name contains the actual name of the antibody as defined in the panel file and Fluor contains the metal tag of the antibody. For IMC data, the metal tag is defined as: (IsotopeShortname)(Mass) , e.g. Ir191 for Iridium isotope 191. To perform this conversion, we use the extract_mcd_file function of the internal imcsegpipe python package. It uses the readimc python package to read .mcd files and the xtiff python package to write the .ome.tiff files. The ometiff output folder for each sample has the following form: \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_p1_pano.png \u251c\u2500\u2500 {XYZ}_s0_slide.png \u251c\u2500\u2500 {XYZ}_schema.xml Next to the individual .ome.tiff files (one per acquisition), .csv files are generated that contain the channel name (the metal isotope) and the channel label (the name of the antibody) in the correct channel order. The _pano.png files contain brighfield panorama acquisitions of the sample where the slide overview is stored as _p1_pano.png . The _schema.xml file contains the internal metadata of the .mcd file in .xml format. The .mcd to .ome.tiff conversion step additionally generates the analysis/cpinp/acquisition_metadata.csv file that stores per acquisition metadata for later use in CellProfiler. Conversion from .ome.tiff to single-channel tiffs In the next pre-processing step, .ome.tiff files are converted to a format that is supported by the histoCAT software 3 . To load images into histoCAT , they need to be stored as unsigned 16-bit or unsigned 32-bit single-channel .tiff files. For each acquisition (each .ome.tiff file), the export_to_histocat converter function exports one folder containing all measured channels as single-channel 32-bit .tiff files. The naming convention of these .tiff files is Name_Fluor , where Name is the name of the antibody (or the metal if no name is available) and Fluor is the name of the metal isotope. For full documentation on the histoCAT format, please follow the manual . Part of a single histoCAT folder will look as follows: \u251c\u2500\u2500 131Xe_Xe131.tiff \u251c\u2500\u2500 Beta-2M-1855((2962))Nd148_Nd148.tiff \u251c\u2500\u2500 ... Conversion from .ome.tiff to multi-channel tiffs For downstream analysis and Ilastik pixel classification, the .ome.tiff files are converted into two multi-channel image stacks in TIFF format: 1. Full stack: The full stack contains all channels specified by the \"1\" entries in the full column of the panel file. This stack will be later used to measure cell-specific expression features of the selected channels. 2. Ilastik stack: The Ilastik stack contains all channels specified by the \"1\" entries in the ilastik column of the panel file. This stack will be used to perform the ilastik training to generate cell, cytoplasm and background pixel probabilities (see Ilastik training ). Additional image stacks can be generated by adapting the panel file and specifying the suffix of the file name. Hot pixel filtering: Each pixel intensity is compared against the maximum intensity of the 3x3 neighboring pixels. If the difference is larger than a specified threshold, the pixel intensity is clipped to the maximum intensity in the 3x3 neighborhood. Setting hpf=None disables hot pixel filtering in this conversion step. By default the hot pixel filtered full stack is written out to the analysis/cpout/images folder and the hot pixel filtered Ilastik stack is written out to the analysis/ilastik folder. The analysis/ilastik folder contains files such as: \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv \u251c\u2500\u2500 ... The analysis/cpout/images folder contains following files: \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv \u251c\u2500\u2500 ... The matching .csv files contain the channel names (metals) in the correct channel order. Export of acquisition-specific metadata In the final step of the pre-processing pipeline, a .csv file containing the full stack channel names (metal isotopes) and a .csv file containing the channel names of the images storing pixel probabilities (see Ilastik training ) are written out to the analysis/cpinp/ folder. Output After image pre-processing the following files have been generated: analysis/ometiff : contains individual folders (one per sample) of which each contains multiple .ome.tiff files (one per acquisition). analysis/histocat : contains individual folders (one per acquisition) of which each contains multiple single-channel .tiff files for upload to histoCAT. analysis/ilastik : contains the ilastik stacks for pixel classification as well as .csv files indicating the channel order. analysis/cpout/images : contains the full stacks for analysis as well as .csv files indicating the channel order. analysis/cpout/panel.csv : the panel file was copied into the final output folder. analysis/cpinp : containing the acquisition_metadata.csv , full_channelmeta.csv , and probab_channelmeta_manual.csv files containing acquisition and channel metadata Catena R. et al. (2018) Ruthenium counterstaining for imaging mass cytometry. The Journal of Pathology 244(4), pages 479-484. \u21a9 Goldberg I.G. et al. (2005) The open microscopy environment (OME) data model and XML file: open tools for informatics and quantitative analysis in biological imaging. Genome Biology 6(5), R47. \u21a9 Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods 14, pages 873\u2013876. \u21a9","title":"Pre-processing"},{"location":"prepro.html#pre-processing","text":"During the first step of the segmentation pipeline, raw data need to be converted to file formats that can be read-in by external software ( Fiji , R , python , histoCAT ). Please follow the preprocessing.ipynb script to pre-process the raw data. To get started, please refer to the instructions here .","title":"Pre-processing"},{"location":"prepro.html#input","text":"The zipped .mcd files The Hyperion Imaging System produces vendor controlled .mcd and .txt files in the following folder structure: \u251c\u2500\u2500 {XYZ}_ROI_001_1.txt \u251c\u2500\u2500 {XYZ}_ROI_002_2.txt \u251c\u2500\u2500 {XYZ}_ROI_003_3.txt \u251c\u2500\u2500 {XYZ}.mcd where XYZ defines the filename, ROI_001 , ROI_002 , ROI_003 are names (description) for the selected regions of interest (ROI) and 1, 2, 3 indicate the acquistion identifiers. The ROI description entry can be specified in the Fluidigm software when selecting ROIs. The .mcd file contains the raw imaging data of all acquired ROIs while each .txt file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, we recommend to zip the folder and specify the location of all .zip files for preprocessing. Each .zip file should only contain data from a single .mcd file and the name of the .zip file should match the name of the .mcd file. The panel file The panel file (in .csv format) specifies the type of antibodies that were used in the experiment and all additional channels (e.g. metals used for counterstaining 1 ) that you want to include in downstream processing. Example entries to the panel file can look like this: Metal Tag Target full ilastik Dy161 Ecad 1 1 Dy162 CD45 1 0 Er166 CD3 1 1 Ru100 Counterstain 1 0 Usually there are more columns but the important ones in this case are Metal Tag , full and ilastik . The 1 in the full column specifies channels that should be written out to an image stack that will be later on used to extract features (also refered to as \"full stack\"). Here, please specify all channels as 1 that you want to have included in the analysis. The 1 in the ilastik column indicates channels that will be used for Ilastik pixel classification therefore being used for image segmentation (also refered to as \"Ilastik stack\"). During the pre-processing steps, you will need to specify the name of the panel column that contains the metal isotopes, the name of the column that contains the 1 or 0 entries for the channels to be analysed and the name of the column that indicates the channels used for Ilastik training as seen above. Naming conventions When going through the preprocessing script , you will notice the specification of the _full and _ilastik suffix indicating the two image stacks mentioned above.","title":"Input"},{"location":"prepro.html#example-data","text":"We provide raw IMC example data at zenodo.org/record/5949116 . This dataset contains 4 .zip archives each of which holds one .mcd and multiple .txt files. The data was acquired as part of the I ntegrated i MMU noprofiling of large adaptive CAN cer patient cohorts (IMMUcan) project immucan.eu using the Hyperion imaging system . Data of 4 patients with different cancer types are provided. To download the raw data together with the panel file, sample metadata and a pre-trained Ilastik classifier, please follow the download script .","title":"Example data"},{"location":"prepro.html#conversion-fom-mcd-to-ometiff-files","text":"In the first step of the pipeline, raw .mcd files are converted into .ome.tiff files 2 . This serves the purpose to allow vendor independent downstream analysis and visualization of the images. For in-depth information of the .ome.tiff file format see here . Each .mcd file can contain multiple acquisitions. This means that multiple multi-channel .ome.tiff files per .mcd file are produced. The Fluor and Name entries of each channel are set. Here Name contains the actual name of the antibody as defined in the panel file and Fluor contains the metal tag of the antibody. For IMC data, the metal tag is defined as: (IsotopeShortname)(Mass) , e.g. Ir191 for Iridium isotope 191. To perform this conversion, we use the extract_mcd_file function of the internal imcsegpipe python package. It uses the readimc python package to read .mcd files and the xtiff python package to write the .ome.tiff files. The ometiff output folder for each sample has the following form: \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.csv \u251c\u2500\u2500 {XYZ}_s0_p1_pano.png \u251c\u2500\u2500 {XYZ}_s0_slide.png \u251c\u2500\u2500 {XYZ}_schema.xml Next to the individual .ome.tiff files (one per acquisition), .csv files are generated that contain the channel name (the metal isotope) and the channel label (the name of the antibody) in the correct channel order. The _pano.png files contain brighfield panorama acquisitions of the sample where the slide overview is stored as _p1_pano.png . The _schema.xml file contains the internal metadata of the .mcd file in .xml format. The .mcd to .ome.tiff conversion step additionally generates the analysis/cpinp/acquisition_metadata.csv file that stores per acquisition metadata for later use in CellProfiler.","title":"Conversion fom .mcd to .ome.tiff files"},{"location":"prepro.html#conversion-from-ometiff-to-single-channel-tiffs","text":"In the next pre-processing step, .ome.tiff files are converted to a format that is supported by the histoCAT software 3 . To load images into histoCAT , they need to be stored as unsigned 16-bit or unsigned 32-bit single-channel .tiff files. For each acquisition (each .ome.tiff file), the export_to_histocat converter function exports one folder containing all measured channels as single-channel 32-bit .tiff files. The naming convention of these .tiff files is Name_Fluor , where Name is the name of the antibody (or the metal if no name is available) and Fluor is the name of the metal isotope. For full documentation on the histoCAT format, please follow the manual . Part of a single histoCAT folder will look as follows: \u251c\u2500\u2500 131Xe_Xe131.tiff \u251c\u2500\u2500 Beta-2M-1855((2962))Nd148_Nd148.tiff \u251c\u2500\u2500 ...","title":"Conversion from .ome.tiff to single-channel tiffs"},{"location":"prepro.html#conversion-from-ometiff-to-multi-channel-tiffs","text":"For downstream analysis and Ilastik pixel classification, the .ome.tiff files are converted into two multi-channel image stacks in TIFF format: 1. Full stack: The full stack contains all channels specified by the \"1\" entries in the full column of the panel file. This stack will be later used to measure cell-specific expression features of the selected channels. 2. Ilastik stack: The Ilastik stack contains all channels specified by the \"1\" entries in the ilastik column of the panel file. This stack will be used to perform the ilastik training to generate cell, cytoplasm and background pixel probabilities (see Ilastik training ). Additional image stacks can be generated by adapting the panel file and specifying the suffix of the file name. Hot pixel filtering: Each pixel intensity is compared against the maximum intensity of the 3x3 neighboring pixels. If the difference is larger than a specified threshold, the pixel intensity is clipped to the maximum intensity in the 3x3 neighborhood. Setting hpf=None disables hot pixel filtering in this conversion step. By default the hot pixel filtered full stack is written out to the analysis/cpout/images folder and the hot pixel filtered Ilastik stack is written out to the analysis/ilastik folder. The analysis/ilastik folder contains files such as: \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv \u251c\u2500\u2500 ... The analysis/cpout/images folder contains following files: \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv \u251c\u2500\u2500 ... The matching .csv files contain the channel names (metals) in the correct channel order.","title":"Conversion from .ome.tiff to multi-channel tiffs"},{"location":"prepro.html#export-of-acquisition-specific-metadata","text":"In the final step of the pre-processing pipeline, a .csv file containing the full stack channel names (metal isotopes) and a .csv file containing the channel names of the images storing pixel probabilities (see Ilastik training ) are written out to the analysis/cpinp/ folder.","title":"Export of acquisition-specific metadata"},{"location":"prepro.html#output","text":"After image pre-processing the following files have been generated: analysis/ometiff : contains individual folders (one per sample) of which each contains multiple .ome.tiff files (one per acquisition). analysis/histocat : contains individual folders (one per acquisition) of which each contains multiple single-channel .tiff files for upload to histoCAT. analysis/ilastik : contains the ilastik stacks for pixel classification as well as .csv files indicating the channel order. analysis/cpout/images : contains the full stacks for analysis as well as .csv files indicating the channel order. analysis/cpout/panel.csv : the panel file was copied into the final output folder. analysis/cpinp : containing the acquisition_metadata.csv , full_channelmeta.csv , and probab_channelmeta_manual.csv files containing acquisition and channel metadata Catena R. et al. (2018) Ruthenium counterstaining for imaging mass cytometry. The Journal of Pathology 244(4), pages 479-484. \u21a9 Goldberg I.G. et al. (2005) The open microscopy environment (OME) data model and XML file: open tools for informatics and quantitative analysis in biological imaging. Genome Biology 6(5), R47. \u21a9 Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods 14, pages 873\u2013876. \u21a9","title":"Output"},{"location":"segmentation.html","text":"Cell segmentation To segment individual objects (here these are cells) in images, the following CellProfiler pipeline reads in pixel probabilities (generated in Ilastik pixel classification ) for segmentation. Set up the pipeline by importing the resources/pipelines/2_segment_ilastik.cppipe pipeline into CellProfiler and perform following steps: Drag and drop the analysis/ilastik folder into the Images window. In the Output Settings adjust the Default Output Folder to analysis/cpout . The following steps are part of the pipeline: The files ending with _Probabilities.tiff are read in as part of the NamesAndTypes module. The images containing pixel probabilities are downscaled by a factor of 0.5 to match the initial image dimensions. In ColorToGray the 3 channel probability images are split into their individual channels: channel 1 - nucleus; channel 2 - cytoplasm; channel 3 - background. The nulcear and cytoplasmic channels are summed up to form a single channel indicating the full cell probability. The nuclear probabilities are smoothed using a gaussian filter. This step can be adjusted or removed to increase segmentation success. The IdentifyPrimaryObjects module is crucial to correctly identifying nuclei. Use the test mode and enable the \"eye\" icon next to the module to observe if nuclei are correctly segmented. The advanced settings can be adjusted to improve segmentation. The MeasureObjectSizeShape module measures the size of the nuclei and the FilterObjects module filters nuclei below a specified threshold. The IdentifySecondaryObjects module expands from the identified nuclei to the border of the full cell probability generated in step 3 or until touching the neighboring cell. The segmentation masks are converted to 16-bit images. The segmentation masks are written out as 16-bit, single-channel .tiff images to the analysis/cpout/masks folder. The downscaled pixel probability images are written out as 16-bit, 3 channel .tiff images to the analysis/cpout/probabilities folder. Output After image segmentation the following files have been generated: analysis/cpout/masks : contains single-channel segmentation masks in 16-bit .tiff format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects. analysis/cpout/probabilities : contains 3 channel images in 16-bit .tiff format representing the downscaled pixel probabilities after Ilastik pixel classification.","title":"Cell segmentation"},{"location":"segmentation.html#cell-segmentation","text":"To segment individual objects (here these are cells) in images, the following CellProfiler pipeline reads in pixel probabilities (generated in Ilastik pixel classification ) for segmentation. Set up the pipeline by importing the resources/pipelines/2_segment_ilastik.cppipe pipeline into CellProfiler and perform following steps: Drag and drop the analysis/ilastik folder into the Images window. In the Output Settings adjust the Default Output Folder to analysis/cpout . The following steps are part of the pipeline: The files ending with _Probabilities.tiff are read in as part of the NamesAndTypes module. The images containing pixel probabilities are downscaled by a factor of 0.5 to match the initial image dimensions. In ColorToGray the 3 channel probability images are split into their individual channels: channel 1 - nucleus; channel 2 - cytoplasm; channel 3 - background. The nulcear and cytoplasmic channels are summed up to form a single channel indicating the full cell probability. The nuclear probabilities are smoothed using a gaussian filter. This step can be adjusted or removed to increase segmentation success. The IdentifyPrimaryObjects module is crucial to correctly identifying nuclei. Use the test mode and enable the \"eye\" icon next to the module to observe if nuclei are correctly segmented. The advanced settings can be adjusted to improve segmentation. The MeasureObjectSizeShape module measures the size of the nuclei and the FilterObjects module filters nuclei below a specified threshold. The IdentifySecondaryObjects module expands from the identified nuclei to the border of the full cell probability generated in step 3 or until touching the neighboring cell. The segmentation masks are converted to 16-bit images. The segmentation masks are written out as 16-bit, single-channel .tiff images to the analysis/cpout/masks folder. The downscaled pixel probability images are written out as 16-bit, 3 channel .tiff images to the analysis/cpout/probabilities folder.","title":"Cell segmentation"},{"location":"segmentation.html#output","text":"After image segmentation the following files have been generated: analysis/cpout/masks : contains single-channel segmentation masks in 16-bit .tiff format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects. analysis/cpout/probabilities : contains 3 channel images in 16-bit .tiff format representing the downscaled pixel probabilities after Ilastik pixel classification.","title":"Output"}]}